{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":34377,"databundleVersionId":3220602,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/spaceship-titanic/train.csv')\ntest=pd.read_csv('/kaggle/input/spaceship-titanic/test.csv')\n\ntest.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isna().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe().T","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_df_info(ds):\n    ds_numerical_cols=ds.select_dtypes(['number']).columns\n    ds_categorical_cols=ds.select_dtypes(['object']).columns\n    print(\"ds_numerical_cols\" ,ds_numerical_cols)\n    print(\"ds_categorical_cols\" ,ds_categorical_cols)\n\n    for col in ds_categorical_cols:\n        if len(ds[col].unique())<20:\n            print(ds[col].unique())\n        else:\n            print(col, \"has more than 20 category\")\n    return ds_numerical_cols, ds_categorical_cols","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_numerical_cols, df_categorical_cols=get_df_info(df)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_numerical_cols, test_categorical_cols=get_df_info(test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[df_numerical_cols].isna().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in df_numerical_cols:\n    plt.figure(figsize=(10, 4))\n    sns.histplot(data=df, x=col, bins=20, kde=True)\n    plt.title(f'Histogram of {col}')\n    plt.xlabel(col)\n    plt.ylabel('Frequency')\n    plt.grid(True)\n    plt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['VRDeck'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## *fill nan*","metadata":{}},{"cell_type":"code","source":"average_spending_by_vip = df.groupby('VIP')[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']].mean()\n\n# Plotting\nplt.figure(figsize=(10, 6))\nfor column in average_spending_by_vip.columns:\n    plt.bar(average_spending_by_vip.index.astype(str), average_spending_by_vip[column], label=column)\n\nplt.xlabel('VIP')\nplt.ylabel('Average Spending')\nplt.title('Average Spending by VIP Status')\nplt.legend()\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"average_spending_by_vip.T.describe().max()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tr=df.groupby('VIP')[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']].mean()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def fill_categorical(ds):\n    ds['VIP']=ds.apply(lambda x: True if (ds.groupby('VIP')[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']].mean())>675 and np.isnan(x['VIP']) else False)\n    print (f\"After Fill nan values of spending :\",ds.isna().sum())\n    return ds\nfill_categorical(df)\nfill_categorical(test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def fill_spendings(ds):\n    ds['VRDeck']=ds.apply(lambda x: x[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa']].mean() if np.isnan(x['VRDeck']) else x['VRDeck'], axis=1)\n    ds['RoomService']=ds.apply(lambda x: x[['VRDeck', 'FoodCourt', 'ShoppingMall', 'Spa']].mean() if np.isnan(x['RoomService']) else x['RoomService'], axis=1)\n    ds['FoodCourt']=ds.apply(lambda x: x[['VRDeck', 'RoomService', 'ShoppingMall', 'Spa']].mean() if np.isnan(x['FoodCourt']) else x['FoodCourt'], axis=1)\n    ds['ShoppingMall']=ds.apply(lambda x: x[['VRDeck', 'RoomService', 'FoodCourt', 'Spa']].mean() if np.isnan(x['ShoppingMall']) else x['ShoppingMall'], axis=1)\n    ds['Spa']=ds.apply(lambda x: x[['VRDeck', 'RoomService', 'FoodCourt', 'ShoppingMall']].mean() if np.isnan(x['Spa']) else x['Spa'], axis=1)\n    \n    ds['Age'].fillna(df['Age'].median(),inplace=True)\n    print (f\"After Fill nan values of spending :\",ds.isna().sum())\n    return ds\n\nfill_spendings(df)\nfill_spendings(test)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categorical_cols=['HomePlanet', 'CryoSleep', 'Destination', 'VIP']\nfor col in categorical_cols:\n    plt.figure(figsize = (10,6))\n    sns.countplot(data = df, x = col, hue = 'Transported')\n    plt.grid()\n    plt.title('Survival distribution by {col}')\n    plt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_percentage(col): \n    categories=df[col].unique()\n    for cate in categories:\n        count=df[(df[col]==cate)].shape[0]\n        count_trans=df[(df[col]==cate)& (df['Transported']==True)].shape[0]\n        if count!=0:\n            percentage=(count_trans/count)*100\n            print(f\"Percentage of 'transported' being True in {cate} column is: {percentage:.2f}%\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categorical_cols=['HomePlanet', 'CryoSleep', 'Destination', 'VIP']\nfor cat in categorical_cols:\n    print(\"----------------\")\n    get_percentage(cat)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}