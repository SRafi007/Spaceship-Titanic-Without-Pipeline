{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":34377,"databundleVersionId":3220602,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-05-07T20:20:56.269782Z","iopub.execute_input":"2024-05-07T20:20:56.270264Z","iopub.status.idle":"2024-05-07T20:20:56.276546Z","shell.execute_reply.started":"2024-05-07T20:20:56.270228Z","shell.execute_reply":"2024-05-07T20:20:56.275426Z"},"trusted":true},"execution_count":73,"outputs":[]},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/spaceship-titanic/train.csv')\ntest=pd.read_csv('/kaggle/input/spaceship-titanic/test.csv')\n\ntest.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-07T20:20:56.278802Z","iopub.execute_input":"2024-05-07T20:20:56.279147Z","iopub.status.idle":"2024-05-07T20:20:56.359850Z","shell.execute_reply.started":"2024-05-07T20:20:56.279119Z","shell.execute_reply":"2024-05-07T20:20:56.358256Z"},"trusted":true},"execution_count":74,"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"  PassengerId HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\n0     0013_01      Earth      True  G/3/S  TRAPPIST-1e  27.0  False   \n1     0018_01      Earth     False  F/4/S  TRAPPIST-1e  19.0  False   \n2     0019_01     Europa      True  C/0/S  55 Cancri e  31.0  False   \n3     0021_01     Europa     False  C/1/S  TRAPPIST-1e  38.0  False   \n4     0023_01      Earth     False  F/5/S  TRAPPIST-1e  20.0  False   \n\n   RoomService  FoodCourt  ShoppingMall     Spa  VRDeck              Name  \n0          0.0        0.0           0.0     0.0     0.0   Nelly Carsoning  \n1          0.0        9.0           0.0  2823.0     0.0    Lerome Peckers  \n2          0.0        0.0           0.0     0.0     0.0   Sabih Unhearfus  \n3          0.0     6652.0           0.0   181.0   585.0  Meratz Caltilter  \n4         10.0        0.0         635.0     0.0     0.0   Brence Harperez  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>HomePlanet</th>\n      <th>CryoSleep</th>\n      <th>Cabin</th>\n      <th>Destination</th>\n      <th>Age</th>\n      <th>VIP</th>\n      <th>RoomService</th>\n      <th>FoodCourt</th>\n      <th>ShoppingMall</th>\n      <th>Spa</th>\n      <th>VRDeck</th>\n      <th>Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0013_01</td>\n      <td>Earth</td>\n      <td>True</td>\n      <td>G/3/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>27.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Nelly Carsoning</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0018_01</td>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/4/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>19.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>2823.0</td>\n      <td>0.0</td>\n      <td>Lerome Peckers</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0019_01</td>\n      <td>Europa</td>\n      <td>True</td>\n      <td>C/0/S</td>\n      <td>55 Cancri e</td>\n      <td>31.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Sabih Unhearfus</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0021_01</td>\n      <td>Europa</td>\n      <td>False</td>\n      <td>C/1/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>38.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>6652.0</td>\n      <td>0.0</td>\n      <td>181.0</td>\n      <td>585.0</td>\n      <td>Meratz Caltilter</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0023_01</td>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/5/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>20.0</td>\n      <td>False</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>635.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Brence Harperez</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-07T20:20:56.361563Z","iopub.execute_input":"2024-05-07T20:20:56.361904Z","iopub.status.idle":"2024-05-07T20:20:56.380031Z","shell.execute_reply.started":"2024-05-07T20:20:56.361878Z","shell.execute_reply":"2024-05-07T20:20:56.378423Z"},"trusted":true},"execution_count":75,"outputs":[{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"PassengerId       0\nHomePlanet      201\nCryoSleep       217\nCabin           199\nDestination     182\nAge             179\nVIP             203\nRoomService     181\nFoodCourt       183\nShoppingMall    208\nSpa             183\nVRDeck          188\nName            200\nTransported       0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df['ID_last2_digit'] = df['PassengerId'].str[-2:]\ndf=df.drop(columns=['PassengerId','Name'],axis=1)\n\ntest['ID_last2_digit'] = test['PassengerId'].str[-2:]\ntest=test.drop(columns=['PassengerId','Name'],axis=1)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-07T20:20:56.382192Z","iopub.execute_input":"2024-05-07T20:20:56.382775Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe().T","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_df_info(ds):\n    ds_numerical_cols=ds.select_dtypes(['number']).columns\n    ds_categorical_cols=ds.select_dtypes(['object']).columns\n    print(\"ds_numerical_cols\" ,ds_numerical_cols)\n    print(\"ds_categorical_cols\" ,ds_categorical_cols)\n\n    for col in ds_categorical_cols:\n        if len(ds[col].unique())<20:\n            print(ds[col].unique())\n        else:\n            print(col, \"has more than 20 category\")\n    return ds_numerical_cols, ds_categorical_cols","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_numerical_cols, df_categorical_cols=get_df_info(df)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_numerical_cols, test_categorical_cols=get_df_info(test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[df_numerical_cols].isna().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in df_numerical_cols:\n    plt.figure(figsize=(10, 4))\n    sns.histplot(data=df, x=col, bins=20, kde=True)\n    plt.title(f'Histogram of {col}')\n    plt.xlabel(col)\n    plt.ylabel('Frequency')\n    plt.grid(True)\n    plt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['VRDeck'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## *fill nan*","metadata":{}},{"cell_type":"code","source":"def fill_spendings(ds):\n    ds['VRDeck']=ds.apply(lambda x: x[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa']].mean() if np.isnan(x['VRDeck']) else x['VRDeck'], axis=1)\n    ds['RoomService']=ds.apply(lambda x: x[['VRDeck', 'FoodCourt', 'ShoppingMall', 'Spa']].mean() if np.isnan(x['RoomService']) else x['RoomService'], axis=1)\n    ds['FoodCourt']=ds.apply(lambda x: x[['VRDeck', 'RoomService', 'ShoppingMall', 'Spa']].mean() if np.isnan(x['FoodCourt']) else x['FoodCourt'], axis=1)\n    ds['ShoppingMall']=ds.apply(lambda x: x[['VRDeck', 'RoomService', 'FoodCourt', 'Spa']].mean() if np.isnan(x['ShoppingMall']) else x['ShoppingMall'], axis=1)\n    ds['Spa']=ds.apply(lambda x: x[['VRDeck', 'RoomService', 'FoodCourt', 'ShoppingMall']].mean() if np.isnan(x['Spa']) else x['Spa'], axis=1)\n    \n    ds['Age'].fillna(df['Age'].median(),inplace=True)\n    print (f\"After Fill nan values of spending :\",ds.isna().sum())\n    return ds\n\ndf=fill_spendings(df)\ntest=fill_spendings(test)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"average_spending_by_vip = df.groupby('VIP')[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']].mean()\n\n# Plotting\nplt.figure(figsize=(10, 6))\nfor column in average_spending_by_vip.columns:\n    plt.bar(average_spending_by_vip.index.astype(str), average_spending_by_vip[column], label=column)\n\nplt.xlabel('VIP')\nplt.ylabel('Average Spending')\nplt.title('Average Spending by VIP Status')\nplt.legend()\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"average_spending_by_vip.T.describe().max()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['avg_spend']=df[['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']].mean(axis=1)\ndf","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def fill_categorical(ds):\n    ds['VIP'] = ds.apply(lambda x: True if (np.isnan(x['VIP']) and (x['avg_spend'] > 675)) else x['VIP'], axis=1)\n    ds['VIP'] = ds.apply(lambda x: False if (np.isnan(x['VIP']) and (x['avg_spend'] < 676)) else x['VIP'], axis=1)\n    \n    #shorting the df and filling  nan with ffill\n    df_short = ds.sort_values(by='VIP', ascending=True)\n    df_short['Cabin']=df_short['Cabin'].bfill()\n    df_short['HomePlanet']=df_short['HomePlanet'].bfill()\n\n    print (f\"After Fill nan values of spending :\",ds.isna().sum())\n    return ds\ndf=fill_categorical(df)\ntest=fill_categorical(test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categorical_cols=['HomePlanet', 'CryoSleep', 'Destination', 'VIP']\nfor col in categorical_cols:\n    plt.figure(figsize = (10,6))\n    sns.countplot(data = df, x = col, hue = 'Transported')\n    plt.grid()\n    plt.title('Survival distribution by {col}')\n    plt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_percentage(col): \n    categories=df[col].unique()\n    for cate in categories:\n        count=df[(df[col]==cate)].shape[0]\n        count_trans=df[(df[col]==cate)& (df['Transported']==True)].shape[0]\n        if count!=0:\n            percentage=(count_trans/count)*100\n            print(f\"Percentage of 'transported' being True in {cate} column is: {percentage:.2f}%\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categorical_cols=['HomePlanet', 'CryoSleep', 'Destination', 'VIP']\nfor cat in categorical_cols:\n    print(\"----------------\")\n    get_percentage(cat)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}